This uses the example of an OSBOXES.ORG version of Ubuntu 17.

1. After powering on Ubuntu, run:

  * install vmware tools and restart Ubuntu (this allows copy and paste)
     Otherwise, continue on and use SSH from your host if you prefer.

  * sudo apt-update

  * apt-get install -y openssh-server openssh-client openvpn net-tools gcc
    Then, type: service ssh start

  * Then update Firefox

  #APT INSTALL
  * Then continue with your DEPENDENCIES:
     apt-get install -y python-pip wget finger nmap build-essential libcurl4-openssl-dev libxml2-utils libreadline-dev libssl-dev libpq5 libpq-dev libreadline5 libsqlite3-dev libpcap-dev git-core autoconf /home/phillsql pgadmin3 curl zlib1g-dev libxml2-dev libxslt1-dev libyaml-dev curl zlib1g-dev libssl-dev libssh-dev libidn11-dev libpcre3-dev libgtk2.0-dev libmysqlclient-dev libpq-dev libsvn-dev firebird-dev python-pip python-lxml xdotool xml-twig-tools ruby-bundler python-pyasn1 python-pyasn1-modules

  #PIP INSTALL (from phill@osboxes, NOT ROOT... phill owns /home/phill not ROOT)
  pip install requests
  pip install google

     NOTE: When this finishes, run:  sudo pip install requests (this is for email harvesting)
        NOTE AGAIN: Run from phill@osboxes, NOT root.


  * While that is building, create new user with the following configurations:

     useradd phill
     passwd phill
     cd /home/
     mkdir phill
     chown -R phill phill
     chgrp -R phill phill
     nano /etc/sudoers
        Make sure THIS happens:
        # User privilege specification
        root    ALL=(ALL:ALL) ALL
        phill   ALL=(ALL:ALL) ALL



  * Add /bin/bash to your /etc/passwd profile (should look like: phill:x:1001:1001::/home/phill:/bin/bash)
     nano /etc/passwd (add /bin/bash to end of user 'phill' line)

  * SSH into your Ubuntu VM via terminal from your host as user phill
    ssh phill@ip.ad.ip.ad

  * create the following helpful aliases after ssh-ing into VM:
    nano ~/.bashrc
    alias ll='ls -lart'
    alias cls='clear'
    ctrl o y ctrl x
    bash

  * Next, deploy "quickie.sh"

      #!/bin/bash
      cd /home/phill/
      if [ -d "/home/phill/toolz"]
      then
        echo "Directory 'toolz' exists"
        cd /home/phill/toolz
      else
        mkdir /home/phill/toolz
        cd /home/phill/toolz
      fi


      git clone https://github.com/sqlmapproject/sqlmap.git
      git clone https://github.com/vanhauser-thc/thc-hydra.git
      git clone https://github.com/sullo/nikto.git
      git clone https://github.com/threatexpress/domainhunter.git
      git clone https://github.com/PowerShellEmpire/Empire.git
      git clone https://github.com/PowerShellMafia/PowerSploit.git
      git clone https://github.com/NetSPI/PowerUpSQL.git
      git clone https://github.com/Veil-Framework/Veil
      git clone https://github.com/jaredhaight/PSAttack.git
      git clone https://github.com/v0re/dirb.git
      git clone https://github.com/wpscanteam/wpscan.git
      git clone https://github.com/laramies/theHarvester.git
      git clone https://github.com/opsdisk/metagoofil.git

  * chmod 755 quickie.sh
    ./quickie.sh

  * ll in /home/phill/toolz to verify git clone

  ** RUBY TIME **

  * Create do-ruby.sh and paste the following:
      #!/bin/bash

      cd ~
      git clone git://github.com/sstephenson/rbenv.git .rbenv
      echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
      echo 'eval "$(rbenv init -)"' >> ~/.bashrc
      exec $SHELL

      git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
      echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc

      # sudo plugin so we can run Metasploit as root with "rbenv sudo msfconsole"
      git clone git://github.com/dcarley/rbenv-sudo.git ~/.rbenv/plugins/rbenv-sudo

      exec $SHELL

      RUBYVERSION=$(wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/.ruby-version -q -O - )
      rbenv install $RUBYVERSION
      rbenv global $RUBYVERSION
      ruby -v

    ** METASPLOIT TIME **

    * Create 'installMsfconsole.sh' with this: (remember to cd into ~/toolz from ROOT)
        #!/bin/bash

        #############################################
        # Check to see if script is running as root #
        #############################################
        if [ "$EUID" -ne 0 ]
          then echo "Please run as root"
          exit
        fi


        cd /home/phill/toolz
        git clone https://github.com/rapid7/metasploit-framework.git
        mv metasploit-framework metasploit
        chown -R phill /home/phill/toolz/metasploit
        chgrp -R phill /home/phill/toolz/metasploit

        cd metasploit
        sudo bash -c 'for MSF in $(ls msf*); do ln -s /home/phill/toolz/metasploit-framework/$MSF /usr/local/bin/$MSF;done'

    ** BACK TO RUBY TIME!! **

    * FIX RubyENV with the following:
      sudo apt-get install -y ruby`ruby -e 'puts RUBY_VERSION[/\d+\.\d+/]'`-dev

      THEN
      sudo gem install -y nokogiri-1.8.2.gem

      THEN
      sudo bundle install

    ** YAML TIME!! **

    * Make sure you are in /toolz/metasploit
      cd /home/phill/toolz/metasploit
      nano config/database.yml.example
        (just to verify it exists... we are going to play with it a little)

      cp config/database.yml.example config/database.yml
      nano config/database.yml
        database: msf
        username: msf
        password: msf

        sh -c "echo export MSF_DATABASE_CONFIG=/home/phill/toolz/metasploit-framework/config/database.yml >> /etc/profile"

        source /etc/profile

    ** POSTGRES SQL TIME!! **

    * Switch to osboxes and sudo -#!/bin/sh
      cd /home/phill/
      su postgres

      createuser msf -P -S -R -D
      createdb -O
      (when prompted for passwd): msf msf
      exit
      exit

    ** MSFCONSOLE --LAUNCH!! **

    * Do it:  msfconsole (from /phill/toolz/metasploit)
      msfconsole


    ** NESSUS TIME!! **

    * Download from their site.  Also, google a 'home-use license'
      scp Nessus-7.1.1-ubuntu910_amd64.deb phill@10.0.0.213:/home/phill

    * Configure dpkg for NESSUS
      dpkg -i Nessus-7.1.1-ubuntu910_amd64.deb

    * start NESSUS
      /etc/init.d/nessusd start
      - Then go to https://pen-test-box:8834 to configure scanner
      - Obtain license from email, and configure username passwd
      user: pickauser
      passwd: youshouldknow

    ** HYDRA TIME!! **

    * cd toolz/thc-hydra (as phill@osboxes)
      ./configure
      make
      sudo make install

    ** VPN TIME!! **

    * Quick housekeeping...
      cd ~
      mkdir Lab
      mv ~/client.ovpn ~/Lab
      cd ~/Lab
      mv client.ovpn lab.ovpn

    * Script the VPN connection
      add "auth.txt" to line "auth-user" in "nano lab.ovpn"
      THEN paste the following into vpn.sh

          #!/bin/bash

          #############################################
          # Check to see if script is running as root #
          #############################################
          if [ "$EUID" -ne 0 ]
            then echo "Please run as root"
            exit
          fi

        if echo 'ifconfig tun0' | grep -q "00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00"
        then
          echo "VPN up"
        else
          echo "VPN down, attempting to connect..."
          cd ~/Lab
          nohup openvpn --config lab.ovpn &
        fi
        exit 0

    * Set Cron every x minutes
      cd ~/Lab
      0,15,30,45 * * * * ~/Lab/vpn.sh


      sudo openvpn client.ovpn
      enter creds when prompted:
      ifconfig tun0

    ** SEEK AND DISCOVER TIME!! **

    * Here, I will CAT and Paste (huh...get it? lol [maybe]) discoverNetwork.sh

        #!/bin/bash

        #############################################
        # Check to see if script is running as root #
        #############################################
        if [ "$EUID" -ne 0 ]
          then echo "Please run as root"
          exit
        fi

        ####################################
        # Check to see if gcc is installed #
        ####################################

        file1="/usr/bin/gcc"
        if [ -f "$file1" ]
        then
        echo "$file is installed."
           clear
        else
        echo "$file not found."
        echo Installing gcc
           apt-get install -y gcc
        clear
        fi

        ###########################
        # Miscellaneous Files to download #
        ###########################
        cd /root/
        if [ -d "/root/misc-files" ]
        then
          echo "Directory /root/misc-files exists."
        else
          mkdir misc-files
          cd /root/misc-files
          wget https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/oracle_default_userpass.txt
        fi

        #####################
        # Download propecia #
        #####################
        file2="/bin/propecia"
        if [ -f "$file2" ]
        then
        	echo "$file is installed."
            clear
        else
        	echo "$file not found."
        	echo Installing propecia
            cd /tmp
            wget --no-check-certificate https://dl.packetstormsecurity.net/UNIX/scanners/propecia.c
            gcc propecia.c -o propecia
            cp propecia /bin
        fi


        ##########################
        # Download onetwopunch   #
        ##########################
        file3="/home/phill/onetwopunch"
        if [ -f "$file3" ]
        then
          echo "$file3 is installed."
        else
          echo Installing onetwopunch...
          cd /home/phill/toolz
          git clone https://github.com/superkojiman/onetwopunch.git
          cd /home/phill/toolz/onetwopunch
          chmod 755 onetwopunch.sh
        fi

        ########################
        # Make the directories #
        ########################
        cd /tmp
        rm -rf customerAudit/
        rm -rf NetworkAudit/
        mkdir -p /tmp/NetworkAudit/discovered_services/
        mkdir -p /tmp/NetworkAudit/scan/windows/
        mkdir -p /tmp/NetworkAudit/scan/sunrpc/
        mkdir -p /tmp/NetworkAudit/scan/ssh/
        mkdir -p /tmp/NetworkAudit/scan/ftp/
        mkdir -p /tmp/NetworkAudit/scan/http/
        mkdir -p /tmp/NetworkAudit/scan/telnet/
        mkdir -p /tmp/NetworkAudit/scan/pop3/
        mkdir -p /tmp/NetworkAudit/scan/printers/
        mkdir -p /tmp/NetworkAudit/scan/mssql_databases/
        mkdir -p /tmp/NetworkAudit/scan/oracle_databases/
        mkdir -p /tmp/NetworkAudit/scan/mysql_databases/
        mkdir -p /tmp/NetworkAudit/scan/mongodb_databases/
        mkdir -p /tmp/NetworkAudit/scan/postgres_databases/


        ######################
        # Find Windows Hosts #
        ######################
        clear
        echo "Scanning for windows hosts."
        propecia 172.31.2 445 >> /tmp/NetworkAudit/discovered_services/windows_hosts
        clear
        echo "Done scanning for windows hosts. FTP is next."


        ##################
        # Find FTP Hosts #
        ##################
        echo "Scanning for hosts running FTP."
        propecia 172.31.2 21 >> /tmp/NetworkAudit/discovered_services/ftp_hosts
        clear
        echo "Done scanning for FTP hosts. SSH is next."

        ##################
        # Find SSH Hosts #
        ##################
        echo "Scanning for hosts running SSH."
        propecia 172.31.2 22 >> /tmp/NetworkAudit/discovered_services/ssh_hosts
        clear
        echo "Done scanning for SSH hosts. POP3 is next."


        ###################
        # Find POP3 Hosts #
        ###################
        echo "Scanning for hosts running POP3."
        propecia 172.31.2 110 >> /tmp/NetworkAudit/discovered_services/pop3_hosts
        clear
        echo "Done scanning for POP3 hosts. SunRPC is next."


        #####################
        # Find SunRPC Hosts #
        #####################
        echo "Scanning for hosts running SunRPC."
        propecia 172.31.2 111 >> /tmp/NetworkAudit/discovered_services/sunrpc_hosts
        clear
        echo "Done scanning for SunRPC hosts. Telnet is next."


        #####################
        # Find Telnet Hosts #
        #####################
        echo "Scanning for hosts running Telnet."
        propecia 172.31.2 23 >> /tmp/NetworkAudit/discovered_services/telnet_hosts
        clear
        echo "Done scanning for Telnet hosts. HTTP is next."


        ###################
        # Find HTTP Hosts #
        ###################
        echo "Scanning for hosts running HTTP"
        propecia 172.31.2 80 >> /tmp/NetworkAudit/discovered_services/http_hosts
        clear
        echo "Done scanning for HTTP hosts. HTTPS hosts are next."


        ###################
        # Find HTTPS Hosts #
        ###################
        echo "Scanning for hosts running HTTP"
        propecia 172.31.2 443 >> /tmp/NetworkAudit/discovered_services/https_hosts
        clear
        echo "Done scanning for HTTPS hosts. Databases are next."


        ##################
        # Find Databases #
        ##################
        echo "Scanning for hosts running MS SQL Server"
        propecia 172.31.2 1433 >> /tmp/NetworkAudit/discovered_services/mssql_hosts
        clear

        echo "Scanning for hosts running Oracle"
        propecia 172.31.2 1521 >> /tmp/NetworkAudit/discovered_services/oracle_hosts
        clear

        echo "Scanning for hosts running Postgres"
        propecia 172.31.2 5432 >> /tmp/NetworkAudit/discovered_services/postgres_hosts
        clear

        echo "Scanning for hosts running MongoDB"
        propecia 172.31.2 27017 >> /tmp/NetworkAudit/discovered_services/mongodb_hosts
        clear

        echo "Scanning for hosts running MySQL"
        propecia 172.31.2 3306 >> /tmp/NetworkAudit/discovered_services/mysql_hosts
        clear
        echo "Done doing the host discovery. Moving on to nmap'ing each host discovered. Windows hosts are first."


        ###############################
        # Ok, let's do the NMAP files #
        ###############################
        clear
        # Windows
        for x in `cat /tmp/NetworkAudit/discovered_services/windows_hosts` ; do nmap -Pn -n -T4 --open -p445 --script=msrpc-enum,smb-enum-domains,smb-enum-groups,smb-enum-processes,smb-enum-sessions,smb-enum-shares,smb-enum-users,smb-mbenum,smb-os-discovery,smb-security-mode,smb-server-stats,smb-system-info,stuxnet-detect $x > /tmp/NetworkAudit/scan/windows/$x ; done
        echo "Done with Windows.  Now scanning FTP hosts..."

        clear
        # FTP
        for x in `cat /tmp/NetworkAudit/discovered_services/ftp_hosts` ; do nmap -Pn -n -T4 --open -p21 --script=banner,ftp-anon,ftp-bounce,ftp-proftpd-backdoor,ftp-vsftpd-backdoor $x > /tmp/NetworkAudit/scan/ftp/$x ; done
        echo "Done with FTP.  Now scanning SSH hosts..."

        clear
        # SSH
        for x in `cat /tmp/NetworkAudit/discovered_services/ssh_hosts` ; do nmap -Pn -n -T4 --open -p22 --script=sshv1,ssh2-enum-algos $x > /tmp/NetworkAudit/scan/ssh/$x ; done
        echo "Done with SSH.  Now scanning SunRPC hosts..."

        clear
        # SUNRPC
        for x in `cat /tmp/NetworkAudit/discovered_services/sunrpc_hosts` ; do nmap -Pn -n -T4 --open -p111 --script=nfs-ls,nfs-showmount,nfs-statfs,rpcinfo $x > /tmp/NetworkAudit/scan/sunrpc/$x ; done
        echo "Done with SunRPC.  Now scanning POP3 hosts..."

        clear
        # POP3
        for x in `cat /tmp/NetworkAudit/discovered_services/pop3_hosts` ; do nmap -Pn -n -T4 --open -p110 --script=banner,pop3-capabilities,pop3-ntlm-info,ssl*,tls-nextprotoneg  $x > /tmp/NetworkAudit/scan/pop3/$x ; done
        echo "Done with POP3.  Now scanning http hosts (unless commented out in script ;|)"

        # clear
        # HTTP Fix this...maybe use https://github.com/jmortega/europython_ethical_hacking/blob/master/NmapScannerAsync.py
        # as a good reference for what nmap nse scripts to run against port 80 and 443
        # for x in `cat /tmp/NetworkAudit/discovered_services/http_hosts` ; do nmap -sV -O --script-args=unsafe=1 --script-args=unsafe  --script "auth,brute,discovery,exploit,external,fuzzer,intrusive,malware,safe,version,vuln and not(http-slowloris or http-brute or http-enum or http-form-fuzzer)" $x > /tmp/NetworkAudit/scan/http/$x ; done
        # echo "Done with HTTP."


        # clear
        # HTTP Fix this...maybe use https://github.com/jmortega/europython_ethical_hacking/blob/master/NmapScannerAsync.py
        # as a good reference for what nmap nse scripts to run against port 80 and 443
        # for x in `cat /tmp/NetworkAudit/discovered_services/https_hosts` ; do nmap -sV -O --script-args=unsafe=1 --script-args=unsafe  --script "auth,brute,discovery,exploit,external,fuzzer,intrusive,malware,safe,version,vuln and not(http-slowloris or http-brute or http-enum or http-form-fuzzer)" $x > /tmp/NetworkAudit/scan/http/$x ; done
        # echo "Done with HTTP."

        for x in `cat /tmp/NetworkAudit/discovered_services/https_hosts` ; do nmap -sV -O -T4 --script "auth,discovery,exploit,version,vuln and not(http-slowloris or http-brute or http-enum or http-form-fuzzer)" $x > /tmp/NetworkAudit/scan/http/$x ; done
         echo "Done with HTTP.  Now scanning MSSQL hosts..."

        clear
        # SQL Servers
        for x in `cat /tmp/NetworkAudit/discovered_services/mssql_hosts` ; do -Pn -n -T4 --open -p1433 --script=ms-sql-dump-hashes,ms-sql-empty-password,ms-sql-info $x > /tmp/NetworkAudit/scan/mssql_databases/$x ; done
        echo "Done with MS SQL.  Now scanning MongoDB hosts..."

        clear
        # Oracle Servers
        # FIX THIS: needs brute force wordlists for this to run correctly
        # for x in `cat /tmp/NetworkAudit/discovered_services/oracle_hosts` ; do nmap -Pn -n --open -p1521 --script=oracle-sid-brute --script oracle-enum-users --script-args oracle-enum-users.sid=ORCL,userdb=orausers.txt $x >> /tmp/NetworkAudit/scan/oracle_databases/$x ; done
        # echo "Done with Oracle."

        clear
        # MongoDB
        for x in `cat /tmp/NetworkAudit/discovered_services/mongodb_hosts` ; do nmap -Pn -n -T4 --open -p27017 --script=mongodb-databases,mongodb-info  $x > /tmp/NetworkAudit/scan/mongodb_databases/$x ; done
        echo "Done with MongoDB.  Now scanning MySQL hosts..."


        clear
        # MySQL Servers
        for x in `cat /tmp/NetworkAudit/discovered_services/mysql_hosts` ; do nmap -Pn -n -T4 --open -p3306 --script=mysql-databases,mysql-empty-password,mysql-info,mysql-users,mysql-variables $x >> /tmp/NetworkAudit/scan/mysql_databases/$x ; done
        echo "Done with MySQL.  Now (I should be) scanning Postgres hosts..."


        # Add postgres nse scripts
        # References:
        # https://nmap.org/nsedoc/lib/pgsql.html
        # https://nmap.org/nsedoc/scripts/pgsql-brute.html
        #

        echo " "
        echo " "
        sleep 1
        clear
        echo "Done, now check your results."
        sleep 2
        clear
        cd /tmp/NetworkAudit/scan/
        ls

  ** OBSERVE YOUR RESULTS!!!!!!! **

  * First, scp your /tmp/NetworkAudit tree to your host (this is where your Nessus instance wants to look first)
    cd /tmp (within Ubuntu)
    scp -r ./NetworkAudit hostpc@10.0.0.10:~/Downloads/PCP/tmp

  * Use Nessus to granularly scan based on the text files created from your RESULTS
    Login
    New Scan > Advanced Scan > Add file > ftp_hosts
  * Configure Policy for FTP only (makes faster scanning)
    Disable all other scans.
    Perform similar Policy crafting for per-instance of discovered host
      e.g., oracle, SMB, SSH, HTTP, etc.  
